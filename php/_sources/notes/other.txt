Read this http://ramikayyali.com/archives/2005/02/25/iterators

IteratorIterator
----------------

IteratorIterator seems like an internal class needed for changing a non-Iterator but Traversable--internal class?--
into an Iterator that the concrete classes need.

Example:

.. code-block:: php

    <?php
    class Book implements IteratorAggregate, Countable {
	    // ...
        function count() 
        {
	    return count($this->_chapters);
        }
    }
	     
    print "Number of chapters in our book: " . count($book) . PHP_EOL;

Since we now have an iterator, itâ€™s easy to add our own filtering, for instance, limiting the foreach() to the first 2 chapters:
1 2 3 4 5 6 7 8 9 10 11 12 	

Using IteratorIterator to apply filtering
 
.. code-block:: php

    <?php
    // "change" our IteratorAggregate into a Iterator using IteratorIterator.
    $it = new IteratorIterator($book);

    // Display the first two chapters only
    $it = new LimitIterator($it, 0, 2);
     
    foreach ($it as $chapter) {

        print "- " . $chapter->getTitle() . PHP_EOL;
    }

Special Iterators
-----------------

See http://eide.org/2008/08/05/iterators/


AppendIterator
--------------

Iterates over several iterators one after the other, which have been append() 'ed.
